#include <iostream>
#include <stack>
#include <queue>

using namespace std;

union type
{
    double _double;     // occupies 4 bytes
    int _int; // occupies 4 bytes
    bool _bool;     // occupies 1 byte
};

class Graf_DFS
{
protected:
    int n, m;
    bool A[100][100];
    bool odwiedzone[100];

    virtual void sprawdz_wierzcholki(int wierzch, int i) {};
    virtual void sprawdz_nieodwiedzone_wierzcholki(int wierzch, int i) {};

public:
    Graf_DFS();
    ~Graf_DFS() {};

    int value_m()
    {
        return m;
    }
    int value_n()
    {
        return n;
    }

    bool value_A(int i, int j)
    {
        return A[i][j];
    }


    void Wczytaj();
    void ZerujTablice();
    void PrzejdzGraf(int poczatek=0);
    virtual type Sprawdz()
    {
        PrzejdzGraf();
    };


};

Graf_DFS::Graf_DFS()
{
    n=0;
    m=0;
    for(int i=0; i<100; ++i)
    {
        odwiedzone[i]=0;

        for(int j=0; j<100; ++j)
        {
            A[i][j]=0;
        }
    }
}


void Graf_DFS::Wczytaj()
{
    cin>> n>>m;

    for(int i=0; i<m; ++i)
    {
        int a, b;
        cin>>a>>b;

        A[a][b]=1;
        A[b][a]=1;
    }
}

void Graf_DFS::ZerujTablice()
{
    n=0;
    m=0;
    for(int i=0; i<100; ++i)
    {
        odwiedzone[i]=0;

        for(int j=0; j<100; ++j)
        {
            A[i][j]=0;
        }
    }
}

void Graf_DFS::PrzejdzGraf(int poczatek)
{
    int tmp, i;
    int wierzch;
    stack<int> S;
    S.push(poczatek);
    i=0;

    while(!S.empty())
    {

        wierzch=S.top();
        S.pop();


        if(odwiedzone[wierzch]==false)
        {
            odwiedzone[wierzch]=true;


            for( i=0; i<n; ++i)
            {
                if( A[wierzch][i]==true)
                {
                    sprawdz_wierzcholki(wierzch, i);

                    if(odwiedzone[i] == false)
                    {
                        S.push(i);
                        sprawdz_nieodwiedzone_wierzcholki(wierzch, i);
                    }

                }
            }
        }
    }
}


class CzyDwudzielny : public Graf_DFS
{
protected:
    int kolory[100];
    type czyDwudzielny;

    void sprawdz_wierzcholki(int wierzch, int i);
    void sprawdz_nieodwiedzone_wierzcholki(int wierzch, int i) {};

public:
    CzyDwudzielny()
        : Graf_DFS()
    {
        for(int i=0; i<100; ++i)
        {
            kolory[i]=0;
        }
    }

    CzyDwudzielny(Graf_DFS *G)
        : Graf_DFS()
    {
        n=G->value_n();
        m=G->value_m();

        for(int i=0; i<100; ++i)
        {
            for(int j=0; j<100; ++j)
            {
                A[i][j]=G->value_A(i, j);
            }
        }

        for(int i=0; i<100; ++i)
        {
            kolory[i]=0;
        }
    }


    type Sprawdz();
    void ZerujTablice();
};


void CzyDwudzielny::ZerujTablice()
{
    Graf_DFS *D;
    D=this;
    D->ZerujTablice();

    for(int i=0; i<100; ++i)
    {
        kolory[i]=0;
    }

}

void CzyDwudzielny::sprawdz_wierzcholki(int wierzch, int i)
{
    if(kolory[i] == 0)
    {
        kolory[i] = -kolory[wierzch];
    }
    if(kolory[i] == kolory[wierzch])
    {
        czyDwudzielny._bool = false;
    };

};


type CzyDwudzielny::Sprawdz()
{
    czyDwudzielny._bool= true;

    for(int i=0; i<100; ++i)
    {
        kolory[i]=0;
        odwiedzone[i]=0;
    }

    kolory[0] = 1;

    PrzejdzGraf(0);

    return czyDwudzielny;
};

/*
class CzySpojny : public DFS
{
protected:
    type spojny;
    void sprawdz_wierzcholki(int wierzch, int i) {};
    void sprawdz_nieodwiedzone_wierzcholki(int wierzch, int i) {};

public:
    CzySpojny()
        : DFS()
    {};
    ~CzySpojny() {};

    type Sprawdz();
};

/*
bool CzySpojny::Sprawdz()
{
    PrzejdzGraf(0);

    spojny=true;
    for(int i=0; i<n; ++i)
    {
        if(odwiedzone[i]==false)
        {
            spojny=false;
            return spojny;
        }
    }

    return spojny;
}


class LiczbaSpojnychPodgrafow : public DFS
{
protected:
    int liczba;
    int pierwszyNieodwiedzonyWierzcholek;
    void sprawdz_wierzcholki(int wierzch, int i){};
    void sprawdz_nieodwiedzone_wierzcholki(int wierzch, int i) {};

public:
    LiczbaSpojnychPodgrafow(){};
    ~LiczbaSpojnychPodgrafow(){};

    bool Sprawdz();

    int PierwszyNieodwiedzonyWierzcholek(int i=0);



};

int LiczbaSpojnychPodgrafow::PierwszyNieodwiedzonyWierzcholek(int i)
{
    PrzejdzGraf(i);

    bool spojny=true;
    for(i=0; i<n; ++i)
    {
        if(odwiedzone[i]==false)
        {
            spojny=false;
            return i;
        }
    }

}

int LiczbaSpojnychPodgrafow::Sprawdz()
{
    liczba=0;
    pierwszyNieodwiedzonyWierzcholek=0;
    spojny=false;

    while(!spojny)
    {
         pierwszyNieodwiedzonyWierzcholek=PierwszyNieodwiedzonyWierzcholek(pierwszyNieodwiedzonyWierzcholek);
         ++liczba;
    }

    return liczba;

}
*/
int main()
{

    Graf_DFS *G;
    G=new Graf_DFS;
    G->Wczytaj();
    G=new CzyDwudzielny(G);

    cout<<G->Sprawdz()._bool<<endl;


    return 0;
}
